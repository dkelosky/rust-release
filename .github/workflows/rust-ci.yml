name: Rust CI

on:
  push:
  pull_request:

jobs:

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Get version
      run: "echo ::set-output name=ZOWE2_VERSION::$(cargo pkgid | cut -d# -f2 | cut -d: -f2)"
      id: get-version

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.get-version.outputs.ZOWE2_VERSION }}
        release_name: Release ${{ steps.get-version.outputs.ZOWE2_VERSION }}
        body: |
          Changes in this Release
          - First Change
        draft: false
        prerelease: false

    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

    # - name: Save Release URL File
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: release_url
    #     path: release_url.txt

    - run: "ls -la"

    - uses: actions/upload-artifact@v2
      with:
        name: repo
        path: |
          **
          !.git

  build:

    needs: release

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:

    - uses: actions/download-artifact@v2
      with:
        name: repo

    # - name: Download Release URL File
    #   uses: actions/download-artifact@v1
    #   with:
    #     name: release_url
    #     path: release_url.txt

    # - name: Get Release URL
    #   run: "echo ::set-output name=upload_url::$(cat release_url.txt)"
    #   id: get-release-url

    - name: Build
      run: cargo build --verbose --release

    - name: Run tests
      run: cargo test --verbose

    # - name: Set Release URL
    #   run: "echo ::set-output name=executable_name::$(cat release_url.txt)"
    #   id: name-executable

    - name: Name Executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "EXECUTABLE=zowe2.exe" >> $GITHUB_ENV
        echo "RELEASE_URL=$(type release_url.txt)" >> $GITHUB_ENV

    - name: Name Executable (Non-Windows)
      if: matrix.os != 'windows-latest'
      run: |
        echo "EXECUTABLE=zowe2" >> $GITHUB_ENV
        echo "RELEASE_URL=$(cat release_url.txt)" >> $GITHUB_ENV

    - run: ech "$EXECUTABLE"

    # - name: Zip
      # run: zip -r --junk-paths zowe2.zip target/release/

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: $RELEASE_URL
        asset_path: "./target/release/${EXECUTABLE}"
        asset_name: "${{ matrix.os }}-${EXECUTABLE}"
        asset_content_type: application/octet-stream